// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Lee_Final.Models;

#nullable disable

namespace Lee_Final.Data
{
    public partial class SchoolofhardknocksContext : DbContext
    {
        public SchoolofhardknocksContext()
        {
        }

        public SchoolofhardknocksContext(DbContextOptions<SchoolofhardknocksContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ClassAssignment> ClassAssignments { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<FacultyClass> FacultyClasses { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentSchedule> StudentSchedules { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Assignment>(entity =>
            {
                entity.ToTable("Assignment");

                entity.Property(e => e.AssignmentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("AssignmentID");

                entity.Property(e => e.AssignmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.AssignmentDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AssignmentDueDate).HasColumnType("date");

                entity.Property(e => e.AssignmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Class>(entity =>
            {
                entity.Property(e => e.ClassId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.ClassRoomNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("classRoomNumber");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<ClassAssignment>(entity =>
            {
                entity.ToTable("Class_Assignment");

                entity.Property(e => e.ClassAssignmentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Class_AssignmentID");

                entity.Property(e => e.AssignmentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("AssignmentID");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.HasOne(d => d.Assignment)
                    .WithMany(p => p.ClassAssignments)
                    .HasForeignKey(d => d.AssignmentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Class_Ass__Assig__3D5E1FD2");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.ClassAssignments)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Class_Ass__Class__300424B4");
            });

            modelBuilder.Entity<Faculty>(entity =>
            {
                entity.ToTable("Faculty");

                entity.Property(e => e.FacultyId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FacultyID");

                entity.Property(e => e.FacFirstName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FacLastName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TenureIsChecked).HasColumnName("Tenure_is_checked");

                entity.Property(e => e.Title)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacultyClass>(entity =>
            {
                entity.HasKey(e => e.FacultyClassesId)
                    .HasName("PK__Faculty___3192B6071ECA44CB");

                entity.ToTable("Faculty_Classes");

                entity.Property(e => e.FacultyClassesId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Faculty_ClassesID");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.FacultyId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FacultyID");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.FacultyClasses)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Faculty_C__Class__31EC6D26");

                entity.HasOne(d => d.Faculty)
                    .WithMany(p => p.FacultyClasses)
                    .HasForeignKey(d => d.FacultyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Faculty_C__Facul__32E0915F");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.StudentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("StudentID");

                entity.Property(e => e.StudFirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.StudLastName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.StudMajor)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.StudPhone)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StudentSchedule>(entity =>
            {
                entity.HasKey(e => e.ScheduleId)
                    .HasName("PK__Student___9C8A5B6995736055");

                entity.ToTable("Student_Schedules");

                entity.Property(e => e.ScheduleId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ScheduleID");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.Grade)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StudentId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("StudentID");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.StudentSchedules)
                    .HasForeignKey(d => d.ClassId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Student_S__Class__33D4B598");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.StudentSchedules)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Student_S__Stude__34C8D9D1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}